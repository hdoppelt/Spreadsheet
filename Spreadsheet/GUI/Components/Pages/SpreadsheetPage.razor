@namespace GUI.Client.Pages
@page "/sheets"
@using System.Diagnostics
@using Microsoft.JSInterop
@rendermode InteractiveServer
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<PageTitle>Spreadsheet</PageTitle>

<div class="button-container">

    <!-- Cell label and display box -->
    <label for="selectedCell">Cell:</label>
    <input @bind="SelectedCell" id="selectedCell" name="selectedCell" readonly />

    <!-- Content label and input box -->
    <label for="selectedContents">Content:</label>
    <input id="selectedContents" name="selectedContents" value="@SelectedContents" @ref="TextArea" @onchange="CellContentChanged" />

    <!-- Value label and display box -->
    <label for="selectedValue">Value:</label>
    <input id="selectedValue" name="selectedValue" value="@SelectedValue" readonly />

    <!-- Clear All Cells Button -->
    <button class="btn btn-danger" @onclick="ClearAllCells">Clear All Cells</button>

</div>

<br />

<!-- Spreadsheet Grid -->
<div>
    <div class="table-container">
        <div class="scrollable">
            <table class="table table-bordered">
                <thead>
                    <tr class="fixed-header">
                        <th scope="col">&nbsp;</th>
                        @for (int col = 0; col < COLS; col++)
                        {
                            <th scope="col">@Alphabet[col]</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int row = 0; row < ROWS; row++)
                    {
                        <tr style="padding:0px !important;">
                            <th style="padding:0px !important;" scope="row" class="fixed-column">@(row+1)</th>
                            @for (int col = 0; col < COLS; col++)
                            {
                                int r = row;
                                int c = col;

                                <td @onclick="() => CellClicked(r,c)" style="padding:0px !important;">
                                    <p class="spreadcell"> 
                                        @{
                                            var cellValue = sheet.GetCellValue($"{Alphabet[c]}{r + 1}");
                                            if (cellValue is CS3500.Formula.FormulaError)
                                            {
                                                <text>FormulaError</text>
                                            }
                                            else
                                            {
                                                <text>@cellValue</text>
                                            }
                                        }
                                    </p>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<br />

<div class="button-bar">
    <div class="left-buttons">
        <!-- Save and Load buttons -->
        <button class="btn btn-primary" @onclick="SaveFile">Save</button>
        <label>Load:</label>
        <InputFile type="file" OnChange="HandleFileChooser" />
    </div>

    <div class="right-buttons">
        <!-- Get High Mode and Stop Changing Cell Colors buttons -->
        <button id="goHighModeButton" class="btn btn-secondary" onclick="startChangingColors()">Get High Mode</button>
        <button class="btn btn-danger" onclick="stopChangingColors()">Stop Changing Cell Colors</button>
    </div>
</div>

<!-- Style -->
<style>

    .spreadcell {
        width: 150px;
        height: 40px;
    }

    .table-container {
        overflow-x: auto;
    }

    .fixed-header {
        position: sticky;
        top: 0;
        z-index: 1;
        background-color: #ffffff !important;
    }

    .fixed-column {
        position: sticky;
        left: 0;
        z-index: 1;
        background-color: #ffffff !important;
    }

    .scrollable {
        white-space: nowrap;
        width: 1000px;
        height: 500px;
        margin: -1px;
    }

    .button-bar {
        display: flex;
        justify-content: space-between; /* Space between the two button groups */
        align-items: center; /* Vertically center the buttons */
        width: 100%; /* Make sure it spans the full width */
    }

    .left-buttons {
        display: flex;
        gap: 10px; /* Optional: Adds space between the Save and Load buttons */
        align-items: center; /* Vertically align the elements */
    }

    .right-buttons {
        display: flex;
        gap: 10px; /* Optional: Adds space between the Get High Mode and Stop buttons */
    }


    .button-container {
        display: flex;
        justify-content: space-between; /* Distribute items to the left and right */
        align-items: center; /* Vertically center the content */
        width: 100%; /* Ensure the container spans the full width */
        gap: 10px; /* Optional: Add some spacing between labels and inputs */
    }

    button {
        margin-left: auto; /* Push the button to the right */
    }

    /* Rainbow effect for the Go High Mode button */
    #goHighModeButton {
        background: linear-gradient(90deg, red, orange, yellow, green, blue, indigo, violet);
        color: white;
        border: none;
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.5s ease;
    }

    /* Hover effect */
    #goHighModeButton:hover {
        background: linear-gradient(90deg, violet, indigo, blue, green, yellow, orange, red);
    }

    /* Centering the text in the column headers (letters) and row headers (numbers) */
    th {
        text-align: center;
        vertical-align: middle;
        padding: 10px;
    }

    /* Ensure the entire cell is centered */
    td {
        text-align: center;
        vertical-align: middle;
    }

</style>

<!-- JavaScript -->
<script type="text/javascript">

    function focusElement(id) {
        console.log(`looking for: ${id}`);
        var element = document.getElementById(id);
        if (element) {
            console.log(`focusing element: ${id} ${element}`)
            element.focus();
        }
    }

    window.addKeyPressListener = function (dotNetObject) {
        console.log("registering key press event handler");
        document.addEventListener('keydown', function (event) {
            console.log(`got key: ${event.key}`);
            if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {
                event.preventDefault();
            }
            dotNetObject.invokeMethodAsync('HandleKeyPress', event.key);
        });
    };

    function downloadFile(fileName, fileContent) {
        console.log(`download file ${fileName}`);
        // Create a blob with the file content
        const blob = new Blob([fileContent], { type: "text/plain" });

        // Create a link element
        const a = document.createElement("a");
        a.href = URL.createObjectURL(blob);
        a.download = fileName;

        // Append the anchor element to the body
        document.body.appendChild(a);

        // Click the link to trigger download
        a.click();

        // Remove the anchor element from the DOM
        document.body.removeChild(a);
    }

    // --- JavaScript for changing cell colors and reverting them back to the original color (white) ---

    // Store the interval timer (This will be the time of color changes, this can be changed if needed)
    let colorInterval;

    // Array to store original colors of the cells
    let originalColors = [];

    // Variable to check if colors are changing
    let isColorChanging = false;

    // Function to store the original colors before starting to change them
    function storeOriginalColors() {
        // Select all the cells in the table
        var cells = document.querySelectorAll('td');
        // Clear previous color data from the cells in case they were changed.
        originalColors = [];
        cells.forEach(function (cell) {
            // Store current color, default to white if none
            originalColors.push(cell.style.backgroundColor || "white");
        });
    }

    // Function to change the background colors of the cells
    function changeColors() {
        // Select all the cells in the spreadsheet
        var cells = document.querySelectorAll('td');

        // Loop through each cell and apply a random background color
        cells.forEach(function (cell) {
            cell.style.backgroundColor = getRandomColor();
        });
    }

    // Helper function to generate random colors
    function getRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }
    
    // Function to start changing colors
    function startChangingColors() {
        if (!isColorChanging) {
            // Store the original colors of the cells only once
            storeOriginalColors();
            // Start changing colors every 10th of a second
            colorInterval = setInterval(changeColors, 100);
            // Set this to true to state that teh colors are indeed changing
            isColorChanging = true;
        }
    }

    // Function to stop changing colors and revert to the original ones
    function stopChangingColors() {
        if (isColorChanging) {
            // Stop the interval
            clearInterval(colorInterval);
            // Reset the interval
            colorInterval = null;
            // Set to false since colors aren't chnaging anymore
            isColorChanging = false;

            // Revert to original colors
            var cells = document.querySelectorAll('td');
            cells.forEach(function (cell, index) {
                // Restore the original color of the cells
                cell.style.backgroundColor = originalColors[index];
            });
        }
    }

</script>
