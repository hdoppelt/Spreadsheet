<!-- Name: Harrison Doppelt & Victor Valdez Landa -->
<!-- Date: 10/23/2024 -->

@namespace GUI.Client.Pages
@page "/sheets"
@using System.Diagnostics
@using Microsoft.JSInterop
@rendermode InteractiveServer
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<PageTitle>Spreadsheet</PageTitle>

<!-- Cell, Content, and Value -->
<span>
    <label for="selectedCell">Cell:</label>
    <input @bind="SelectedCell" id="selectedCell" name="selectedCell" readonly />
    <label for="selectedContents">Content:</label>
    <input id="selectedContents" name="selectedContents" value="@SelectedContents" @ref="TextArea" @onchange="CellContentChanged" />
    <label for="selectedValue">Value:</label>
    <input id="selectedValue" name="selectedValue" value="@SelectedValue" readonly />
</span>

<!-- Spreadsheet -->
<div>
    <div class="table-container">
        <div class="scrollable">
            <table class="table table-bordered">
                <thead>
                    <tr class="fixed-header">
                        <th scope="col">&nbsp;</th>
                        @for (int col = 0; col < COLS; col++)
                        {
                            <th scope="col">@Alphabet[col]</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int row = 0; row < ROWS; row++)
                    {
                        <tr style="padding:0px !important;">
                            <th style="padding:0px !important;" scope="row" class="fixed-column">@(row+1)</th>
                            @for (int col = 0; col < COLS; col++)
                            {
                                int r = row;
                                int c = col;

                                <td @onclick="() => CellClicked(r,c)" style="padding:0px !important;">
                                    <p class="spreadcell"> @sheet.GetCellValue($"{Alphabet[c]}{r+1}") </p>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Buttons for changing the colors and to revert thenm back to the original-->
<!-- Button to start the color-changing process -->
<button class="btn btn-secondary" onclick="startChangingColors()">Go High Mode</button>

<!-- Optional button to stop the color-changing process -->
<button class="btn btn-danger" onclick="stopChangingColors()">Stop Changing Cell Colors</button>


<!-- Save and Load -->
<span>
    <button class="btn btn-primary" @onclick="SaveFile">Save</button>
    <label>Load</label><InputFile type="file" OnChange="HandleFileChooser" />
</span>

<!-- Style -->
<style>
    .spreadcell {
        width: 150px;
        height: 40px;
    }

    .table-container {
        overflow-x: auto;
    }

    .fixed-header {
        position: sticky;
        top: 0;
        z-index: 1;
        background-color: #ffffff !important;
    }

    .fixed-column {
        position: sticky;
        left: 0;
        z-index: 1;
        background-color: #ffffff !important;
    }

    .scrollable {
        white-space: nowrap; /* Ensures no line breaks within cells */
        width: 1000px;
        height: 500px;
        margin: -1px;
    }
</style>

<!-- JavaScript -->
<script type="text/javascript">

    function focusElement(id) {
        console.log(`looking for: ${id}`);
        var element = document.getElementById(id);
        if (element) {
            console.log(`focusing element: ${id} ${element}`)
            element.focus();
        }
    }

    window.addKeyPressListener = function (dotNetObject) {
        console.log("registering key press event handler");
        document.addEventListener('keydown', function (event) {
            console.log(`got key: ${event.key}`);
            if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {
                event.preventDefault(); // Prevent arrow keys from scrolling
            }
            dotNetObject.invokeMethodAsync('HandleKeyPress', event.key);
        });
    };

    function downloadFile(fileName, fileContent) {
        console.log(`download file ${fileName}`);
        // Create a blob with the file content
        const blob = new Blob([fileContent], { type: "text/plain" });

        // Create a link element
        const a = document.createElement("a");
        a.href = URL.createObjectURL(blob);
        a.download = fileName;

        // Append the anchor element to the body
        document.body.appendChild(a);

        // Click the link to trigger download
        a.click();

        // Remove the anchor element from the DOM
        document.body.removeChild(a);
    }

    //----JavaScript code for changing cell colors and reverting them back to the original color (white)---------------/

    // Store the interval timer (This will be the time of color changes, this can be changed if needed)
    let colorInterval;

    // Array to store original colors of the cells
    let originalColors = [];

    // Variable to check if colors are changing
    let isColorChanging = false;

    // Function to store the original colors before starting to change them
    function storeOriginalColors() {
        // Select all the cells in the table
        var cells = document.querySelectorAll('td');
        // Clear previous color data from the cells in case they were changed.
        originalColors = [];
        cells.forEach(function (cell) {
            // Store current color, default to white if none
            originalColors.push(cell.style.backgroundColor || "white");
        });
    }

    // Function to change the background colors of the cells
    function changeColors() {
        // Select all the cells in the spreadsheet
        var cells = document.querySelectorAll('td');

        // Loop through each cell and apply a random background color
        cells.forEach(function (cell) {
            cell.style.backgroundColor = getRandomColor();
        });
    }

    // Helper function to generate random colors
    function getRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }
    
    // Function to start changing colors
    function startChangingColors() {
        if (!isColorChanging) {
            // Store the original colors of the cells only once
            storeOriginalColors();
            // Start changing colors every 10th of a second
            colorInterval = setInterval(changeColors, 100);
            // Set this to true to state that teh colors are indeed changing
            isColorChanging = true;
        }
    }

    // Function to stop changing colors and revert to the original ones
    function stopChangingColors() {
        if (isColorChanging) {
            // Stop the interval
            clearInterval(colorInterval);
            // Reset the interval
            colorInterval = null;
            // Set to false since colors aren't chnaging anymore
            isColorChanging = false;

            // Revert to original colors
            var cells = document.querySelectorAll('td');
            cells.forEach(function (cell, index) {
                // Restore the original color of the cells
                cell.style.backgroundColor = originalColors[index];
            });
        }
    }
</script>
